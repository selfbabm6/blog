---
layout: post
title:  "js"
description: js基础.
date:   2020-02-19 11:03:36 
categories: sumrise
---

# js基础题
```js
var b = 10;
(function b(){
    b = 20;
    console.log(b); 
})() //fn
/**
 * IIFE中的函数是函数表达式，而不是函数声明
 * 函数表达式与函数声明不同，函数名只在该函数内部有效，并且此绑定是常量绑定
 * 函数体内的函数名再去赋值，会静默失败。类似常量再赋值
 */

//变量提升
var a = 10;
(function () {
    console.log(a)
    a = 5
    console.log(window.a)
    var a = 20;
    console.log(a)
})()
//undefined=>10=>20

//symbol 唯一性
// example 1
var a={}, b='123', c=123;  
a[b]='b';
a[c]='c';  
console.log(a[b]);

---------------------
// example 2
var a={}, b=Symbol('123'), c=Symbol('123');  
a[b]='b';
a[c]='c';  
console.log(a[b]);

---------------------
// example 3
var a={}, b={key:'123'}, c={key:'456'};  
a[b]='b';
a[c]='c';  
console.log(a[b]);

//左查询右查询
var a = {n: 1};
var b = a;
a.x = a = {n: 2};
/*这一行比较复杂。先获取等号左侧的a.x，但a.x并不存在，于是JS为（堆内存中的）对象创建一个新成员x，这个成员的初始值为undefined，（这也是为什么直接引用一个未定义的变量会报错，但是直接引用一个对象的不存在的成员时，会返回undefined.）创建完成后，目标指针已经指向了这个新成员x，并会先挂起，单等等号右侧的内容有结果了，便完成赋值。接着执行赋值语句的右侧，发现a={n:2}是个简单的赋值操作，于是a的新值等于了{n:2}。这里特别注意，这个a已经不是开头的那个a，而是一个全新的a,这个新a指针已经不是指向原来的值的那个堆内存，而是分配了一个新的堆内存。但是原来旧的堆内存因为还有b在占用，所以并未被回收。然后，将这个新的对象a的堆内存指针，赋值给了刚才挂起的新成员x,此时，对象成员x便等于了新的对象a。所以，现在b={n:1,x:{n:2}};a={n:2};a===b.x(true,注意对象的相等，不是值的相等，而是引用的相等，也就是说，相等表示指针是指向同一个堆内存。)  */
console.log(a.x) 	//undefined
console.log(b.x)  //{n:2}

//
function Foo() {
  Foo.a = function () {
    console.log(1)
  }
  this.a = function () {
    console.log(2)
  }
}
Foo.prototype.a = function () {
  console.log(3)
}
Foo.a = function () {
  console.log(4)
}
Foo.a(); //4
let obj = new Foo(); //this 还是Foo.a
obj.a(); //2
Foo.a(); //1

//包装对象

String('11') == new String('11');  //true
String('11') === new String('11');  //false
typeof String('11') //string
typeof new String('11') //object

//对象的运算
[1, 2] + [2, 1] //1,22,1
//Javascript中所有对象基本都是先调用valueOf方法，如果不是数值，再调用toString方法。

//异步同步macrotask microtask
async function async1() {
    console.log('async1 start');  //2
    await async2(); //执行完后让出执行栈
    console.log('async1 end'); //6
}
async function async2() {
    console.log('async2');  //3
}
console.log('script start');  //1
setTimeout(function() {
    console.log('setTimeout');  //8
}, 0)
async1(); //
new Promise(function(resolve) {
    console.log('promise1');  //4
    resolve();
}).then(function() {
    console.log('promise2');  //7
});
console.log('script end');  //5
/**await 会让出函数执行栈 (async函数默认返回promise)
 * new Promise会立即执行同步代码
 * 先执行宏任务，紧接着执行微任务,接着渲染 eventloop
```